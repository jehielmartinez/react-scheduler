{"version":3,"sources":["components/Form.jsx","components/Event.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","createEvent","useState","_id","name","organizer","date","time","details","event","setEvent","error","setError","handleChange","e","target","value","className","onSubmit","preventDefault","trim","nanoid","type","placeholder","onChange","Event","deleteEvent","onClick","App","initialEvents","JSON","parse","localStorage","getItem","events","setEvents","useEffect","setItem","stringify","id","newEvents","filter","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c982033c.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport nanoid from 'nanoid';\n\nconst Form = ({ createEvent }) => {\n    const [event, setEvent] = useState({\n        _id: '',\n        name: '',\n        organizer: '',\n        date: '',\n        time: '',\n        details: ''\n    });\n\n    const [ error, setError ] = useState(false);\n    \n    const handleChange = e => {\n        setEvent({\n            ...event,\n            [e.target.name]: e.target.value\n        });\n    };\n\n    const { name, organizer, date, time, details } = event;\n\n    const submitEvent = e => {\n        e.preventDefault();\n\n        if(name.trim() === '' || organizer.trim() === '' || date.trim() === '' || time.trim() === '' || details.trim() === ''){\n            setError(true);\n            return;\n        }\n\n        event._id = nanoid();\n\n        createEvent(event);\n\n        setEvent({\n            _id: '',\n            name: '',\n            organizer: '',\n            date: '',\n            time: '',\n            details: ''\n        });\n    };\n\n    return (\n        <Fragment>\n            <h2>Create Event</h2>\n            {error ? <p className='alert-error'>Every field is required</p> : null}\n            <form\n                onSubmit={submitEvent}\n            >\n                <label>Event Title</label>\n                <input \n                    type='text'\n                    name='name'\n                    className='u-full-width'\n                    placeholder='Event Title'\n                    onChange={handleChange}\n                    value={name}\n                />\n\n                <label>Organizer</label>\n                <input \n                    type='text'\n                    name='organizer'\n                    className='u-full-width'\n                    placeholder='Organizer Name'\n                    onChange={handleChange}\n                    value={organizer}\n                />\n\n                <label>Date</label>\n                <input \n                    type='date'\n                    name='date'\n                    className='u-full-width'\n                    onChange={handleChange}\n                    value={date}\n                />\n                <label>Time</label>\n                <input \n                    type='time'\n                    name='time'\n                    className='u-full-width'\n                    onChange={handleChange}\n                    value={time}\n                />\n                <label>Details</label>\n                <textarea\n                    className='u-full-width'\n                    name='details'\n                    onChange={handleChange}\n                    value={details}\n                ></textarea>\n\n                <button\n                    type='submit'\n                    className='u-full-width button-primary'\n                >Add Event</button>\n            </form>\n        </Fragment>\n    );\n};\n\nexport default Form;\n","import React from 'react';\n\nconst Event = ({ event, deleteEvent }) => (\n    <div className='event'>\n        <p>Event: <span>{event.name}</span></p>\n        <p>Organizer: <span>{event.organizer}</span></p>\n        <p>Date: <span>{event.date}</span></p>\n        <p>Time: <span>{event.time}</span></p>\n        <p>Details: <span>{event.details}</span></p>\n\n        <button\n            className='button delete u-full-width'\n            onClick={() => deleteEvent(event._id)}\n        >Delete &times;</button>\n    </div>\n);\n\nexport default Event;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport Form from './components/Form';\nimport Event from './components/Event';\n\nfunction App() {\n  let initialEvents = JSON.parse(localStorage.getItem('events'));\n  if(!initialEvents){\n    initialEvents = [];\n  };\n\n  const [events, setEvents] = useState(initialEvents);\n\n  useEffect(() => {\n      localStorage.setItem('events', JSON.stringify(events));\n  }, [events]);\n\n\n  const createEvent = event => {\n    setEvents([ ...events, event ]);\n  };\n\n  const deleteEvent = id => {\n    const newEvents = events.filter(event => event._id !== id);\n    setEvents(newEvents);\n  };\n\n  return (\n    <Fragment>\n      <h1>Scheduler</h1>\n      <div className='container'>\n        <div className='row'>\n          <div className='one-half column'>\n            <Form \n              createEvent = {createEvent}\n            />\n          </div>\n          <div className='one-half column'>\n            <h2>Events</h2>\n            {events.map(event => (\n              <Event \n                key = {event._id}\n                event = {event}\n                deleteEvent = {deleteEvent}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}